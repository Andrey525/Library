@page "/books"
@using BookService
@inject BookServ.BookServClient Client
@implements IDisposable

<PageTitle>Books</PageTitle>

<h1>Books</h1>

@if (Price != 0)
{
	<p role="status">Price: @Price</p>
}
else
{
	<p role="status">This book is no longer available</p>
}

<div class="table-responsive">
	<table class="table table-striped">
		<thead class="thead-light">
		<tr>
			<th>"Name"</th>
			<th>"Author"</th>
			<th>"Publish year"</th>
			<th>"Action"</th>
		</tr>
		</thead>
		<tbody>
		@if (GetBookReplies != null)
		{
			@foreach (var book in GetBookReplies)
			{
				<tr>
					<td>@book.BookName</td>
					<td>@book.AuthorName</td>
					<td>@book.PublishYear</td>
					<td>
						<button class="btn btn-primary" @onclick="(() => GetBookPriceAsync(book))">Request a price</button>
					</td>
				</tr>
			}
		}
		</tbody>
	</table>
</div>

@code {
	private Timer? _timer;
    private int Price { get; set; }

    private List<GetBookReply>? GetBookReplies { get; set; }

    protected override async Task OnInitializedAsync()
    {
	    await GetBooksAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
	    if (firstRender)
	    {
		    _timer = new Timer((_) =>
		    {
			    InvokeAsync( async ()  =>
			    {
				    await GetBooksAsync();
				    StateHasChanged();
			    });
		    }, null, 4000, 4000);
	    }
    }

    private async Task GetBookPriceAsync(GetBookReply book)
    {
	    var reply = await Client.GetBookPriceAsync(new GetBookPriceRequest()
	    {
		    BookName = book.BookName,
		    AuthorName = book.AuthorName,
		    PublishYear = book.PublishYear
	    });
	    Price = reply.Price;
    }

	static SemaphoreSlim semaphoreSlim = new SemaphoreSlim(1, 1);

    private async Task GetBooksAsync()
    {
		Console.WriteLine("GetBooksAsync");
	    using var call = Client.GetBooks(new Empty());
		await semaphoreSlim.WaitAsync();
	    GetBookReplies = new List<GetBookReply>();
	    await foreach (var message in call.ResponseStream.ReadAllAsync())
	    {
		    GetBookReplies.Add(message);
	    }
		semaphoreSlim.Release();
    }

    public void Dispose()
    {
	    _timer?.Dispose();
    }
}