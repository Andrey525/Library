@page "/books"
@using BookService
@using WebServer.Data
@inject BookServiceInteractor BookServiceInteractor
@implements IDisposable

<PageTitle>Books</PageTitle>

<h1>Books</h1>

@if (Price != 0)
{
	<h3 role="status">Price: @Price</h3>
}
else
{
	<h3 role="status">This book is no longer available</h3>
}

<div class="table-responsive">
	<table class="table table-striped">
		<thead class="thead-light">
		<tr>
			<th>"Name"</th>
			<th>"Author"</th>
			<th>"Publish year"</th>
			<th>"Action"</th>
		</tr>
		</thead>
		<tbody>
		@if (GetBookReplies != null)
		{
			@foreach (var book in GetBookReplies)
			{
				<tr>
					<td>@book.BookName</td>
					<td>@book.AuthorName</td>
					<td>@book.PublishYear</td>
					<td>
						<button class="btn btn-primary" @onclick="(async () => Price = await BookServiceInteractor.GetBookPriceAsync(book))">Request a price</button>
					</td>
				</tr>
			}
		}
		</tbody>
	</table>
</div>

@code {
	private int Price { get; set; }
	private Timer? _timer;
	private static List<GetBookReply>? GetBookReplies { get; set; }
	static SemaphoreSlim semaphoreSlim = new SemaphoreSlim(1, 1);

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			_timer = new Timer((_) =>
			{
				InvokeAsync( async ()  =>
				{
					StateHasChanged();
				});
			}, null, 0, 1000);
		}
		else
		{
			InvokeAsync( async ()  =>
			{
				if (semaphoreSlim.CurrentCount == 0)
				{
					Console.WriteLine("semaphoreSlim.CurrentCount == 0");
					return;
				}

				await semaphoreSlim.WaitAsync();
				GetBookReplies = await BookServiceInteractor.GetBooksAsync();
				await Task.Delay(1000);
				semaphoreSlim.Release();
			});
		}
	}

	public void Dispose()
    {
	    _timer?.Dispose();
    }
}